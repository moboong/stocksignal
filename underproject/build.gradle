/*plugins {
	id 'org.springframework.boot' version '2.5.8'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}*/


buildscript {
	ext { 
		springBootVersion = '2.5.8'
		mooworkVersion = '1.2.0'
	}
	repositories {
		mavenLocal() 
		mavenCentral() 
		maven { 
			url "https://plugins.gradle.org/m2/" 
		} 
	} 
	dependencies { 
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
		/*classpath("com.moowork.gradle:gradle-node-plugin:${mooworkVersion}")*/
		classpath("com.github.node-gradle:gradle-node-plugin:3.1.0")
	}
}
plugins { 
	id 'org.springframework.boot' version '2.5.8' 
	id 'java'
}

apply plugin: 'java' 
apply plugin: 'org.springframework.boot' 
apply plugin: 'io.spring.dependency-management' 
apply plugin: 'com.github.node-gradle.node' 
apply plugin: 'application'

mainClassName = 'com.example.demo.DemoApplication' 
group = 'com.example' 
version = '0.0.1-SNAPSHOT' 
sourceCompatibility = '1.8'

repositories { 
	mavenCentral() 
} 
dependencies { 
	implementation 'org.springframework.boot:spring-boot-starter-web' 
	testImplementation 'org.springframework.boot:spring-boot-starter-test' 
}

def webappDir = "$projectDir/src/main/webapp"
node { 
	version = '16.13.1' 
	download=true 
	workDir = file("${project.buildDir}/nodejs") 
	npmWorkDir=file("${project.buildDir}/npm") 
} 
task appNpmInstall(type: NpmTask) { 
	workingDir = file("${project.projectDir}/src/main/webapp") 
	args = ["install"] 
} 
task appNpmBuild(type: NpmTask) { 
	workingDir = file("${project.projectDir}/src/main/webapp") 
	args = ['run', 'build'] 
} 
task copyWebApp(type: Copy) {
	from "src/main/webapp/build" 
	into 'build/resources/main/static/.' 
}

appNpmBuild.dependsOn appNpmInstall
copyWebApp.dependsOn appNpmBuild
compileJava.dependsOn copyWebApp